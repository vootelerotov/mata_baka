import java.math.BigInteger;


public class ylesanne1 {
	
	//rekursiivne
		public static int fibo1(int n) {
			if (n < 1) {
				return 0;
			} else if(n < 3) {
				return 1;
			}
			return fibo1(n-1) + fibo1(n-2);
		}
		
		//mitte rekursiivne
		public static BigInteger fibo2(int n) {
			BigInteger f1 = BigInteger.valueOf(0);
			BigInteger f2 = BigInteger.valueOf(1);
			BigInteger f3 = BigInteger.valueOf(0);
			int jrk = 2;
			if (n == 0){
				return BigInteger.valueOf(0);
			}
			if (n == 1){
				return BigInteger.valueOf(1);
			}
			while (jrk <= n){
				f3 = f1.add(f2);
				f1 = f2;
				f2 = f3;
				jrk++; 
			}
			return f3;
		}
		
		public static int ajaArvesti1() {
			int n = 0; //esialgne arv
			double maxTime = 1.0;
			double aegSekund = 0.0;
			double eelnevAeg = 0.0;
			while (aegSekund <= maxTime) {
				eelnevAeg = aegSekund;
				long algusaeg = System.nanoTime();
				fibo1(n);
				long aeg = System.nanoTime() - algusaeg;
				aegSekund = (double)aeg / 1000000000.0;
				n++;
				//System.out.println( n + "nda fibonacci arvu leidmiseks kulus " + aegSekund + " sekundit ");
			}
			System.out.println( n-1 + "-nda fibonacci arvu leidmiseks kulus " + eelnevAeg + " sekundit ");
			return n-1;	
		}
		
		public static int ajaArvesti2() {
			int n = 150000; //esialgne arv
			System.out.println("arv" + fibo2(n).toString()); //ilma selle printimiseta ei t66ta
			double maxTime = 1.0;
			double aegSekund = 0.0;
			double eelnevAeg = 0.0;
			while (aegSekund <= maxTime) {
				eelnevAeg = aegSekund;
				long algusaeg = System.nanoTime();
				fibo2(n);
				long aeg = System.nanoTime() - algusaeg;
				aegSekund = (double)aeg / 1000000000.0;
				n+= 1000;
				System.out.println( n + "nda fibonacci arvu leidmiseks kulus " + aegSekund + " sekundit "); //kontrollin aegu
			}
			System.out.println( n-1000 + "-nda fibonacci arvu leidmiseks kulus ilma ekursioonita " + eelnevAeg + " sekundit ");
			return n-1000;	
		}
		
		public static void main(String[] args) {
		 
//			System.out.println("rekursiooniga " + ajaArvesti1()); //41
			
			System.out.println("ilma rekursioonita " + ajaArvesti2());  //156000
			
			
			
		}
		
}
